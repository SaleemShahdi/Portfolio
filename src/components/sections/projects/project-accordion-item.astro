---
import { ChevronDown, ChevronUp, Github, ExternalLink } from "lucide-react";
import type { CollectionEntry } from "astro:content";
import Badge from "@/components/ui/badge.astro";
import MarkdownRenderer from "@/components/ui/markdown-renderer.astro";

interface Props {
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;
---

<div class="project-item group w-full cursor-pointer flex-col gap-y-3 p-4 not-last:border-b">
  <div class="toggle-btn flex w-full items-center justify-between text-left select-none">
    <h3 class="text-lg font-semibold underline-offset-6 group-hover:underline">
      {project.data.name}
    </h3>
    <div class="flex items-center">
      <span class="toggle-text text-xs font-medium text-primary mr-2">Show more</span>
      <ChevronDown className="toggle-icon-down size-4" />
      <ChevronUp className="toggle-icon-up hidden size-4" />
    </div>
  </div>

  <div class="description-content">
    <div class="prose min-w-full pt-4">
      <MarkdownRenderer content={project.body} />
    </div>

    <div class="mt-4 flex flex-wrap gap-1.5">
      {project.data.technologies.map(technology => (
        <Badge>{technology}</Badge>
      ))}
    </div>

    <div class="mt-4 flex gap-2">
      {project.data.sourceCode && (
        <a href={project.data.sourceCode} target="_blank" class="flex items-center gap-1 text-sm font-medium text-primary hover:underline">
          <Github class="size-4" />
          Source Code
        </a>
      )}
      {project.data.preview && (
        <a href={project.data.preview} target="_blank" class="flex items-center gap-1 text-sm font-medium text-primary hover:underline">
          <ExternalLink class="size-4" />
          Live Demo
        </a>
      )}
    </div>
  </div>
</div>

<style>
  .description-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const accordions = document.querySelectorAll(".project-item");

    accordions.forEach(accordion => {
      const button = accordion.querySelector(".toggle-btn");
      const content = accordion.querySelector(".description-content");
      const toggleText = accordion.querySelector(".toggle-text");
      const iconDown = accordion.querySelector(".toggle-icon-down");
      const iconUp = accordion.querySelector(".toggle-icon-up");

      if (button && content && toggleText && iconDown && iconUp) {
        button.addEventListener("click", (event) => {
          // This line is the key fix: it stops the browser's default scroll-on-click behavior.
          event.preventDefault();

          const isExpanded = !!content.style.maxHeight;

          if (isExpanded) {
            content.style.maxHeight = null;
          } else {
            content.style.maxHeight = content.scrollHeight + "px";
          }
          
          const nowExpanded = !!content.style.maxHeight;
          toggleText.textContent = nowExpanded ? "Show less" : "Show more";
          iconDown.classList.toggle("hidden", nowExpanded);
          iconUp.classList.toggle("hidden", !nowExpanded);
        });
      }
    });
  });
</script>